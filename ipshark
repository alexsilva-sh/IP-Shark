import requests
import pyperclip
import ipaddress

# Substitua 'api' pelas suas chaves de API
ABUSEIPDB_API_KEY = 'api'
VIRUSTOTAL_API_KEY = 'api'

def is_valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False

def check_ip_abuseipdb(ip):
    url = 'https://api.abuseipdb.com/api/v2/check'
    headers = {'Accept': 'application/json', 'Key': ABUSEIPDB_API_KEY}
    params = {'ipAddress': ip, 'maxAgeInDays': 90}
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None

def check_ip_virustotal(ip):
    url = f'https://www.virustotal.com/api/v3/ip_addresses/{ip}'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None

def get_location(ip):
    try:
        url = f'http://ip-api.com/json/{ip}?fields=status,country,countryCode,city'
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        if data.get('status') == 'fail':
            return 'N/A', 'N/A'
        
        city = data.get('city', 'N/A')
        country_code = data.get('countryCode', 'N/A')
        country_name = translate_country_name(country_code)
        return city, country_name
    except requests.exceptions.RequestException:
        return 'N/A', 'N/A'

def get_domain_from_abuseipdb(abuseipdb_result):
    try:
        return abuseipdb_result['data'].get('domain', 'N/A') if abuseipdb_result else 'N/A'
    except KeyError:
        return 'N/A'

def is_whitelisted_abuseipdb(abuseipdb_result):
    try:
        return "Sim" if abuseipdb_result['data'].get('isWhitelisted', False) else "Não"
    except KeyError:
        return "Não"

def translate_country_name(country_code):
    try:
        url = f'https://restcountries.com/v3.1/alpha/{country_code}'
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data[0]['translations']['por']['common'] if 'translations' in data[0] else data[0]['name']['common']
    except requests.exceptions.RequestException:
        return country_code

def format_output(ip, abuseipdb_result, virustotal_result, city, country, domain, index):
    try:
        abuse_confidence = abuseipdb_result['data']['abuseConfidenceScore'] if abuseipdb_result else 0
        vt_score = virustotal_result['data']['attributes']['last_analysis_stats']['malicious'] if virustotal_result else 0
        whitelisted = is_whitelisted_abuseipdb(abuseipdb_result)

        abuseipdb_link = f"https://www.abuseipdb.com/check/{ip}"
        virustotal_link = f"https://www.virustotal.com/gui/ip-address/{ip}"

        reputation_status = "possui má reputação" if abuse_confidence > 0 or vt_score > 0 else "NÃO possui má reputação"

        output = f"""
[{index}] {ip} - {reputation_status}
IP em Whitelist no AbuseIPDB: {whitelisted}
Score no AbuseIPDB: {abuse_confidence}%
Score no VirusTotal: {vt_score}
Nome de domínio: {domain}
País: {country}
Cidade: {city}
- {abuseipdb_link}
- {virustotal_link}"""
        return output
    except Exception as e:
        return f"Erro ao formatar a saída para {ip}: {e}"

def main():
    print("""                                                                 
              ########                              
              ############                          
              ##############                        
              ################                                  
  _____ _____     _____ _                _    
 |_   _|  __  |  / ____| |              | |   
   | | | |__) | | (___ | |__   __ _ _ __| | __
   | | |  ___/   |___ || '_ | | _` | '__| |/ /
  _| |_| |       ____) | | | | (_| | |  |   /
 |_____|_|      |_____/|_| |_||__,_|_|  |_||_|
              #######################                
              ###########################                       
              ##############################          
              #################################          
              ######################################      
              ##########################################      
              # Desenvolvido por @alexsilva-sh #############
              # Contribua https://github.com/alexsilva-sh/ #####
    """)

    while True:
        ips_input = input("Digite os IPs para consulta (separados por vírgula) ou 'sair' para encerrar: ")
        if ips_input.lower() == 'sair':
            break
        
        ips = [ip.strip() for ip in ips_input.split(',')]
        all_outputs = ""
        
        for index, ip in enumerate(ips, 1):
            if not is_valid_ip(ip):
                print(f"IP inválido: {ip}. Pulando.")
                continue
            
            abuseipdb_result = check_ip_abuseipdb(ip)
            virustotal_result = check_ip_virustotal(ip)
            city, country = get_location(ip)
            domain = get_domain_from_abuseipdb(abuseipdb_result)
            
            formatted_output = format_output(ip, abuseipdb_result, virustotal_result, city, country, domain, index)
            all_outputs += formatted_output + "\n"
        
        print(all_outputs)
        pyperclip.copy(all_outputs)
        print("O resultado foi copiado para a área de transferência.")
        print("#######################################################################################################")
        print("#######################################################################################################")
        print(" ")
        print(" ")
if __name__ == "__main__":
    main()
